@@30845514 ( this article have only dead-link references , perhaps you are searching for JSON#JSONSchema ) JSON-WSP ( JavaScript Object Notation Web-Service Protocol ) is a web-service protocol that uses JSON for service description , requests and responses . It is very much inspired from JSON-RPC , but the lack of a service description specification with documentation in JSON-RPC sparked the design of JSON-WSP . The description format has the same purpose for JSON-WSP as WSDL has for SOAP or IDL for CORBA , which is to describe the types and methods used in a given service . It also describes inter-type relations ( i.e. nested types ) and defines which types are expected as method arguments and which types the user can expect to receive as method return values . Finally the description opens the possibility to add documentation on service , method , parameter and return levels . Communication between clients and a JSON-WSP server is carried out using HTTP POST requests and responses , with the JSON objects as data with the content-type application/json. # Specifications # JSON-WSP consists of four JSON object specifications : NOTE @ @ @ @ @ @ @ @ @ @ notation # # # Building blocks # # * If the name of the building-block being defined starts with rx- , it means that the definition is a regular expression . In these definitions square brackets have the role of defining character classes and parentheses have the role of defining capturing groups . * In all other cases , square brackets notate lists and parentheses notate either a decision : : <pre> ( d1 d2 .. ) </pre> a repetition of 0-many : <pre> ( .. ) * </pre> a repetition 1-many : <pre> ( .. ) + </pre> or something optional : <pre> ( .. ) ? </pre> # Common building-blocks # **19;1999;source <rx-freetext> = . * <rx-identifier> = a-zA-Za-zA-Z0-9* <rx-number> = 0-9+ <rx-boolean> = ( truefalse ) <key> = <rx-identifier> <primitive-value> = ( <rx-freetext> <rx-number> <rx-boolean> ) <value> = ( <primitive-value> ( <value> , ) * ( <key> : <value> , ) * ) <method-name> = <rx-identifier> <service-name> = <rx-identifier> </source> # Description object # # # Additional building-blocks # # **19;2020;source <primitive> = ( string number float attachment ) <service-locator> = **27;2041;rfc-1738 <type-name> = <rx-identifier> <member-name> = <rx-identifier> @ @ @ @ @ @ @ @ @ @ <rx-freetext> <param-name> = <rx-identifier> <def-order> = <rx-number> <param-optional> = <rx-boolean> </source> # # Specification # # **26;2070;source type : jsonwsp/description , version : 1.0 , servicename : <service-name> , url : <service-locator> , types : ( <type-name> : ( <member-name> : <multi-type> ) + ) * , methods : ( <method-name> : doclines : ( <doc-string> , ) * , params : ( <param-name> : doclines : ( <doc-string> , ) * , deforder : <def-order> , type : <multi-type> , optional : <param-optional> , ) * , retinfo : doclines : ( <doc-string> , ) * , type : <multi-type> ) + </source> # # Descriptions # # <service-locator> : The service endpoint URL that accepts JSON-WSP POST request objects . <service-name> : Service name is case sensitive . It identifies a specific service exposed on a specific server . doclines : Each doc-string contained in a doclines list reflects a single line of documentation that relates to the parent object of the doclines .. # Request object # The request object contains information about which method to invoke and what arguments to invoke the method with . It also @ @ @ @ @ @ @ @ @ @ The optional mirror value can be used to send information from the client which will then be reflected by the server and returned unchanged in the response object 's reflection value . This feature allows clients to send multiple requests to a method and send request identification values that can be intercepted by the client 's response handler . This is often necessary from javascript if more than one request is being processed simultaneously by the server and the response order is unknown by the client . # # Specification # # **26;2098;source type : jsonwsp/request , version : 1.0 , methodname : <method-name> , args : ( <key> : <value> , ) * ( , mirror : <value> ) ? </source> # Response object # # # Specification # # The reflection value is an unchanged server reflection of the request object 's mirror value . It is marked as optional because it is the client that controls via the request whether it is there or not . **26;2126;source type : jsonwsp/response , version : 1.0 , servicename : <service-name> , methodname : <method-name> , result : <value> ( , @ @ @ @ @ @ @ @ @ @ # # # Additional building-blocks # # **19;2154;source <fault-code> = ( incompatible client server ) <fault-string> = <rx-freetext> <fault-filename> = <rx-freetext> <fault-lineno> = <rx-number> </source> # # Specification # # **26;2175;source type : jsonwsp/fault , version : 1.0 , fault : code : <fault-code> , string : <fault-string> , ( detail : ( <fault-string> , ) * , ) ? ( filename : <fault-filename> , ) ? ( lineno : <fault-lineno> , ) ? ( , reflection : <value> ) ? </source> # # Descriptions # # <fault-code> : The meanings of the possible fault-codes : * incompatible : Client version of JSON-WSP is incompatible with the server version of JSON-WSP . Typically one will encounter this type of fault-code if there is a version major in difference between the client and the server . * server : An error occurred on the server side after the client request has been successfully consumed . * client : The clients request could not be consumed by the server due to incorrect format or missing required arguments etc. # Real world example # # Description # **39;2203;source type : jsonwsp/description , version : @ @ @ @ @ @ @ @ @ @ **28;2244;TOOLONG ? path=UserService/jsonwsp , types : Group : groupid : number , displayname : string , name : string , members : User , User : username : string , userid : number , mobile : string , age : number , givenname : string , surname : string , CreateUserResponse : userid : number , success : boolean , methods : listUsers : doclines : List Users that have a username , givenname or surname that matches a given filter . , params : namefilter : deforder : 1 , doclines : String used for filtering the resulting list of users . , type : string , optional : false , retinfo : doclines : List of users . , type : User , listGroups : doclines : List Groups that have a name or displayname that matches a given filter . , params : namefilter : deforder : 1 , doclines : String used for filtering the resulting list of groups . , type : string , optional : false , retinfo : doclines : List of groups . , type : Group , createUser : doclines : Create @ @ @ @ @ @ @ @ @ @ deforder : 1 , doclines : Unique username for the new user account . , type : string , optional : false , givenname : deforder : 2 , doclines : First name . , type : string , optional : false , surname : deforder : 3 , doclines : Last name . , type : string , optional : false , mobile : deforder : 4 , doclines : Optional mobile number . , type : string , optional : true , age : deforder : 5 , doclines : Optional age of the person behind the account . , type : number , optional : true , retinfo : doclines : , type : CreateUserResponse </source> # Service call 1 # # # Request # # **26;2274;source type : jsonwsp/request , version : 1.0 , methodname : createUser , args : username : bettyw , givenname : Betty , surname : Wilson , mobile : 555-3423444 , mirror : id : 2 </source> # # Response # # **26;2302;source type : jsonwsp/response , version : 1.0 , servicename : UserService , method : createUser , result : userid @ @ @ @ @ @ @ @ @ @ 2 </source> # Service call 2 # # # Request # # **26;2330;source type : jsonwsp/request , version : 1.0 , methodname : listUsers , args : namefilter : jack </source> # # Response # # **26;2358;source type : jsonwsp/response , version : 1.0 , servicename : UserService , method : listUsers , result : username : jackp , userid : 153 , mobile : 555-377843 , age : 34 , givenname : Jack , surname : Petersen , username : bradj , userid : 321 , mobile : 555-437546 , age : 27 , givenname : Brad , surname : Jackson </source> # Attachments # The attachment type is new in JSON-WSP . It can be used anywhere in the description as a primitive type . In requests and responses that involve attachments , the message format must be multipart/related where the attachments are transported as mimeparts of media type : with no **25;2386;TOOLONG ( only raw binary ) . Mimeparts must have a unique CONTENT-ID in their entity headers . Attachment values in the JSON-WSP request/response objects must match the regular expression cid : ( . + ) $ @ @ @ @ @ @ @ @ @ @ 's CONTENT-ID. # Attachment service description example # The following example shows what a simple JSON-WSP description with attachments could look like : **26;2413;source type : jsonwsp/description , version : 1.0 , url : http : **36;2441;TOOLONG , servicename : TransferService , types : File : data : attachment , name : string , methods : upload : retinfo : doclines : , type : number , doclines : , params : incoming : deforder : 1 , doclines : , type : File , optional : false </source> # Attachment service request example # A request to the method upload described above could look like this : **26;2479;source Content-Type : multipart/related ; boundary= **32;2507;TOOLONG **34;2541;TOOLONG Content-Type : application/json , charset=UTF-8 Content-ID : body type : jsonwsp/request , version : 1.0 , methodname : upload , args : incoming : data : cid:img2354.png , name : face.png , data : cid:cv.pdf , name : cv.pdf **34;2577;TOOLONG Content-Type : application/octet-stream Content-ID : img2354.png **23;2613;png-image **34;2638;TOOLONG Content-Type : application/octet-stream Content-ID : cv.pdf **23;2674;pdf-image **36;2699;TOOLONG </source> # Server Implementations # * Ladon is a python-based framework that exposes json-wsp and other protocols * ladonize.org @ @ @ @ @ @ @ @ @ @ demos. * A Python JSON-WSP server implentation # Client Implementations # * * * contains a Python Client ( from ladon.clients.jsonwsp import JSONWSPClient ) * * ( Not entirely complete ) * Python client * Python client 
