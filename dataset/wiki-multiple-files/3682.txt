@@34556514 In the field of computer vision , velocity moments are weighted averages of the intensities of pixels in a sequence of images , similar to image moments but in addition to describing an object 's shape also describe its motion through the sequence of images . Velocity moments can be used to aid automated identification of a shape in an image when information about the motion is significant in its description . There are currently two established versions of velocity moments : CartesianJ . D. Shutler , M. S. Nixon , C. J. Harris , Statistical Gait Description via Temporal Moments , Proc . SSIAI 2000 - Austin , Texas , : pp. 291-295 , 2000 and Zernike.J . D. Shutler and M. S. Nixon , Zernike Velocity Moments for Description and Recognition of Moving Shapes , Proc . BMVC 2001 , Manchester , UK , 2:pp. 705-714 , 2001 # Cartesian velocity moments # # Cartesian moments for single images # A Cartesian moment of a single image is calculated by : <math> mpq = sumx=1M sumy=1N xp yq Pxy </math> where <math> M </math> and <math> @ @ @ @ @ @ @ @ @ @ Pxy </math> is the intensity of the pixel at the point <math> ( x , y ) </math> in the image , and <math> xp yq </math> is the basis function . # Cartesian velocity moments for sequences of images # Cartesian velocity moments are based on these Cartesian moments . A Cartesian velocity moment <math> vmpqmugamma </math> is defined by : <math> vmpqmugamma = sumi=2images sumx=1M sumy=1N U ( i , mu , gamma ) C ( i , p , g ) Pixy </math> where <math> M </math> and <math> N </math> are again the dimensions of the image , <math> images </math> is the number of images in the sequence , and <math> Pixy </math> is the intensity of the pixel at the point <math> ( x , y ) </math> in image <math> i </math> . <math> C ( i , p , q ) </math> is taken from Central moments , added so the equation is translation invariant , defined as : <math> C ( i , p , q ) = ( x-overlinexi ) p ( y-overlineyi ) q </math> where <math> overlinexi </math> is @ @ @ @ @ @ @ @ @ @ for image <math> i </math> , and similarly for <math> y </math> . <math> U ( i , mu , gamma ) </math> introduces velocity into the equation as : <math> U ( i , mu , gamma ) = ( overlinexi-overlinexi-1 ) mu ( overlineyi-overlineyi-1 ) gamma </math> where <math> overlinexi-1 </math> is the <math> x </math> coordinate of the centre of mass for the previous image , <math> i-1 </math> , and again similarly for <math> y </math> . After the Cartesian velocity moment is calculated , it can be normalised by : <math> overlinevmpqmugamma = frac vmpqmugammaA * I </math> where <math> A </math> is the average area of the object , in pixels , and <math> I </math> is the number of images . Now the value is not affected by the number of images in the sequence or the size of the object . As Cartesian moments are non-orthogonal , so are Cartesian velocity moments , so different moments can be closely correlated . These velocity moments do however provide translation and scale invariance ( unless the scale changes within the sequence of images ) . @ @ @ @ @ @ @ @ @ @ images # A Zernike moment of a single image is calculated by : <math> Amn = frac m + 1pi sumx sumy Vmn ( r , theta ) * Pxy </math> where <math> * </math> denotes the complex conjugate , <math> m </math> is an integer between <math> 0 </math> and <math> infty </math> , and <math> n </math> is an integer such that <math> m - n </math> is even and <math> n **10;257747; . For calculating Zernike moments , the image , or section of the image which is of interest is mapped to the unit disc , then <math> Pxy </math> is the intensity of the pixel at the point <math> ( x , y ) </math> on the disc and <math> x2 + y2 le 1 </math> is a restriction on values of <math> x </math> and <math> y </math> . The coordinates are then mapped to polar coordinates , and <math> r </math> and <math> theta </math> are the polar coordinates of the point <math> ( x , y ) </math> on the unit disc map . <math> Vmn ( r , theta ) </math> is @ @ @ @ @ @ @ @ @ @ Vmn ( r , theta ) = Rmn(r)ejntheta </math> : <math> Rmn(r) = sums=0frac m-n2 ( -1 ) s F ( m , n , s , r ) </math> : <math> F ( m , n , s , r ) = frac ( m-s ) ! s ! ( frac m+n2-s ) ! ( frac m-n2-s ) ! rm-2s </math> # Zernike velocity moments for sequences of images # Zernike velocity moments are based on these Zernike moments . A Zernike velocity moment <math> Amnmugamma </math> is defined by : <math> Amnmugamma = frac m + 1pi sumi=2images sumx=1 sumy=1 U ( i , mu , gamma ) Vmn ( r , theta ) * Pixy </math> where <math> images </math> is again the number of images in the sequence , and <math> Pixy </math> is the intensity of the pixel at the point <math> ( x , y ) </math> on the unit disc mapped from image <math> i </math> . <math> U ( i , mu , gamma ) </math> introduces velocity into the equation in the same way as in the Cartesian velocity moments and <math> @ @ @ @ @ @ @ @ @ @ the Zernike moments equation above . Like the Cartesian velocity moments , Zernike velocity moments can be normalised by : <math> overlineAmnmugamma = frac AmnmugammaA * I </math> where <math> A </math> is the average area of the object , in pixels , and <math> I </math> is the number of images . As Zernike velocity moments are based on the orthogonal Zernike moments , they produce less correlated and more compact descriptions than Cartesian velocity moments . Zernike velocity moments also provide translation and scale invariance ( even when the scale changes within the sequence ) . # Comparison of methods # # References # <references/> 
